
variables:
  solution: 'RxUI.MauiToolkit/RxUI.MauiToolkit.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  TOOLKIT_NET6_VERSION: '6.0.300'
  LATEST_NET6_VERSION: '6.0.x'


trigger:
  branches:
    include:
      - develop
      - feature/*
    exclude:
      - main
pr:
  autoCancel: 'true'
  branches:
    include:
    - develop
  paths:
    exclude:
    - main
    - README.md

jobs:
  - job: build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
    
    - checkout: self
      fetchDepth: 0

    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: "5.10.x"
    
    - task: gitversion/execute@0
      displayName: Determine Version

    - script: |
        echo Major: $(GitVersion.Major)
        echo Minor: $(GitVersion.Minor)
        echo Patch: $(GitVersion.Patch)
        echo PreReleaseTag: $(GitVersion.PreReleaseTag)
        echo PreReleaseTagWithDash: $(GitVersion.PreReleaseTagWithDash)
        echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
        echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
        echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
        echo BuildMetaData: $(GitVersion.BuildMetaData)
        echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
        echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
        echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
        echo SemVer: $(GitVersion.SemVer)
        echo LegacySemVer: $(GitVersion.LegacySemVer)
        echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
        echo AssemblySemVer: $(GitVersion.AssemblySemVer)
        echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
        echo FullSemVer: $(GitVersion.FullSemVer)
        echo InformationalVersion: $(GitVersion.InformationalVersion)
        echo BranchName: $(GitVersion.BranchName)
        echo EscapedBranchName: $(GitVersion.EscapedBranchName)
        echo Sha: $(GitVersion.Sha)
        echo ShortSha: $(GitVersion.ShortSha)
        echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
        echo NuGetVersion: $(GitVersion.NuGetVersion)
        echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
        echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
        echo VersionSourceSha: $(GitVersion.VersionSourceSha)
        echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
        echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
        echo UncommittedChanges: $(GitVersion.UncommittedChanges)
        echo CommitDate: $(GitVersion.CommitDate)

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)' 

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:Version="$(GitVersion.SemVer)" /p:ApplicationDisplayVersion="$(GitVersion.SemVer)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*test*.dll
          !**\*TestAdapter.dll
          !**\obj\**
        searchFolder: '$(System.DefaultWorkingDirectory)'
        codeCoverageEnabled: true
        testRunTitle: 'v$(GitVersion.SemVer)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**\bin\release\**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Builds'
        publishLocation: 'Container'
